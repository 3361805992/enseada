// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package boot

import (
	"context"

	enseada "github.com/enseadaio/enseada/pkg"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func initServer(ctx context.Context, c *viper.Viper) (*enseada.Server, error) {
	client, err := dbClient(ctx, c)
	if err != nil {
		return nil, err
	}
	lvl := logLvl(c)
	authLogger := authLog(lvl)
	oAuthClientStore := newOAuthClientStore(client, authLogger)
	oAuthRequestStore := newOAuthRequestStore(client, authLogger)
	oidcSessionStore := newOIDCSessionStore(client, authLogger)
	pkceRequestStore := newPKCERequestStore(client, authLogger)
	store := newStore(client, authLogger, oAuthClientStore, oAuthRequestStore, oidcSessionStore, pkceRequestStore)
	secretKeyBase := skb(c)
	oAuth2Provider, err := oauthProvider(store, secretKeyBase)
	if err != nil {
		return nil, err
	}
	enseadaPublicHost := publicHost(c)
	bootDefaultClientSecret := defaultClientSecret(c)
	config := oauthClient(enseadaPublicHost, bootDefaultClientSecret)
	model, err := casbinModel()
	if err != nil {
		return nil, err
	}
	casbinLogger := casbinLog(lvl)
	authCasbinAdapter, err := casbinAdapter(client, casbinLogger)
	if err != nil {
		return nil, err
	}
	authCasbinWatcher := casbinWatcher(client, casbinLogger)
	enforcer, err := casbinEnforcer(ctx, model, authCasbinAdapter, authCasbinWatcher)
	if err != nil {
		return nil, err
	}
	server, err := enseada.NewServer(oAuth2Provider, config, store, enforcer, secretKeyBase, enseadaPublicHost, lvl)
	if err != nil {
		return nil, err
	}
	return server, nil
}

// wire.go:

var authSet = wire.NewSet(
	authLog,
	newOAuthClientStore,
	newOAuthRequestStore,
	newOIDCSessionStore,
	newPKCERequestStore,
	newStore,
	oauthProvider,
	defaultClientSecret,
	oauthClient,
)

var casbinSet = wire.NewSet(
	casbinLog,
	casbinModel,
	casbinAdapter,
	casbinWatcher,
	casbinEnforcer,
)
